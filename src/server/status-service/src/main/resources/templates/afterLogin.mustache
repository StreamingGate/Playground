{{>header}}
<body>
<h3>일반 영상 또는 라이브 영상</h3>
영상 uuid: <span id="video-uuid"></span>
영상 제목:

</body>
{{>footer}}
<!-- JavaScript -->
<script>
    const userData = [
        {
            // "name": "user1",
            "uuid": "11111111-1234-1234-123456789012",
            "email": "u1@email.com",
            "password": "1234",
            "token":""
        },
        {
            // "name": "user2",
            "uuid": "22222222-1234-1234-123456789012",
            "email": "u2@email.com",
            "password": "1234",
            "token":""
        },
        {
            // "name": "user3",
            "uuid": "33333333-1234-1234-123456789012",
            "email": "u3@email.com",
            "password": "1234",
            "token":""
        },
        {
            // "name": "user4",
            "uuid": "44444444-1234-1234-123456789012",
            "email": "u4@email.com",
            "password": "1234",
            "token":""
        }
    ];

    /////////redis setup/////////
    initRedis = () =>{
        axios.get('http://localhost:9999/init-redis')
                .then(()=>{
                    console.log("init-redis 완료.");
                });
    }
    /////////////////////////////
    let sock = new SockJS("/ws");
    let ws = Stomp.over(sock);

    let friendsResultElem = document.querySelector("#friends-result");

    // stomp connection
    ws.connect({}, function (frame) {

    }, function (error) {
        alert("error " + JSON.stringify(error));
    });

    drawFriendStatus = (body) => {
        console.log("loginUuid: "+ body.uuid);
        const uuid = body.uuid;
        const children = friendsResultElem.children;
        console.log("children size:"+children);

        for(let i = 0; i < children.length; i++){
            console.log("children id:"+children[i].id);
            if(children[i].id === uuid){
                console.log("equal to loginUuid");
                if(body.status === true)
                    children[i].innerText = `${children[i].id} 로그인!`;
                else
                    children[i].innerText = `${children[i].id} 로그아웃!`;
            }
        }
    }

    // 로그인 버튼
    publishLogin = (i) =>{
        const uuid = userData[i].uuid;
        ws.subscribe("/topic/friends/" + uuid, function (resp) {
            drawFriendStatus(JSON.parse(resp.body));
        });

        // ws.send("/app/status/login/" + uuid, {}, null);
    }


    getFriends = (i) => {
        console.log("==2.getFriends");
        const uuid = userData[i].uuid;
        const token = userData[i].token;

        axios.get('http://localhost:8000/main-service/friends/' + uuid, {
            headers: {
                Authorization: `Bearer ${token}`
            }
        })
                .then(resp => {
                    // let friendsResultElem = document.querySelector("#friends-result");
                    console.log(`resp: ${JSON.stringify(resp)}`)
                    let ar = resp.data.result;
                    console.log(`친구: ${ar.length}명`);
                    for (let i = 0; i < ar.length; i = i + 1) {
                        let elem = document.createElement("li");
                        elem.id = `${ar[i].uuid}`
                        elem.innerText = `${ar[i].uuid} 접속: --`;
                        friendsResultElem.append(elem);
                    }

                    publishLogin(i);
                })
                .catch(error => {
                    console.log("getFriends에러:" + JSON.stringify(error));
                })
    };


    login = (i) => {
        // 로그인 요청
        const req = {
            email: userData[i].email,
            password: userData[i].password
        };

        console.log("==1.login");
        axios.post('http://localhost:8000/user-service/login', req)
                .then(resp => {
                    const result = JSON.stringify(resp);
                    console.log("로그인:" + result);
                    userData[i].token = resp.headers.token;

                    console.log("uuid:"+userData[i].uuid);
                    console.log("token:"+userData[i].token);

                    getFriends(i);
                })
                .catch(error => {
                    console.log("로그인 에러:" + JSON.stringify(error));
                    console.log(error.message);
                });
        console.log("로그인 함");
    };

    // stomp disconnection
    wsDisconnection = (i) => {
        console.log("==2.disconnect");
        ws.disconnect(() => {
        }, {"uuid": userData[i].uuid});
    }
    logout = (i) => {
        console.log("==1.로그아웃")
        /* ws요청 보내기 */
        wsDisconnection(i);
    }
</script>